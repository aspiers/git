git-repair(1)
=============

NAME
----
git-repair - salvage a damaged repository.


SYNOPSIS
--------
[verse]
'git repair color' <commit> [<color> ...]
'git repair reset'
'git repair grafts' <rev-list-arg>...

DESCRIPTION
-----------
'git repair' provides tools to assist with the salvaging of damaged git repositories.

SUBCOMMANDS
-----------
color <commit>::
+
Given a commit, answer the color of the commit. Or, if a color is specified, verify that the commit satisfies the invariant of the specified color or exit with a non-zero exit code otherwise.

reset::
+
Reset salvaging state.

grafts <rev-list-arg>...::
+
Outputs the minimal set of grafts required to make the generated revision list fully traversable in the sense of git pack-objects.

COLORING INVARIANTS
-------------------

Commits are colored as follows.

black::
+
The commit is either missing or locally corrupt.

grey::
+
The commit is not black, but its tree is not fully traversable.

red::
+
The commit is neither grey or black, its tree is fully traversable and at least one of its parents is grey or black.

orange::
+
The commit is neither black, grey or red, its tree is fully traversable, and at least one of its parents is
either red or orange.

green::
+
The commit is neither black, grey, red or orange, its tree is fully traversable and all its parents, if any, are
also green.

white::
+
The analysis for the commit is still pending.

REWRITING RULES
---------------
All black commits are replaced with a commit referencing the empty tree with the message:
...............
replacement for missing commit: <sha1>
...............

All grey commits are replaced with a commit referencing the empty tree with the message:
..............
replacement for damaged commit: <sha1>

<original message>
..............
A graft is created for each grey or red commit that references a black or grey commit.  Each parent in the graft is the original parent, if that parent is orange, red or green. Otherwise, that commit is replaced by a reference to the replacement commit.

ALGORITHM
---------
..............
while git rev-list <args...> fails
	if there is a message of the form ... <commit>, then classify <commit>

while ! git rev-list --objects <args...> --not $LIMITS | git pack-objects --stdout >/dev/null
do
	#
	#
	#
	git rev-list --reverse <args...> --not $LIMITS | while read commit
	do
		classify <commit>
		if <commit> is green, then break;
	done

	discover new limit
	classify <limit>
	append <limit> to LIMIT
done

git rev-list <args...> --not $LIMITS | egrep "^(${grafts})\$"
..............


SEE ALSO
--------
linkgit:git-fsck[1].

GIT
---
Part of the linkgit:git[1] suite
